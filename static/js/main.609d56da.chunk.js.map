{"version":3,"sources":["img/bg.jpg","component/api_key","component/Titles.js","component/Forms.js","component/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Titles","react_default","a","createElement","Fragment","Container","Forms","props","Form","onSubmit","getWeather","color","Group","inline","Field","Label","Input","type","placeholder","name","Button","positive","Weather","Grid","Column","city","country","description","temperature","humidity","pressure","error","API_KEY","App","state","undefined","_callee","e","call_api","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","_this","setState","fetch","concat","sent","json","console","log","main","temp","sys","weather","stop","this","component_Titles","columns","Row","stretched","width","Responsive","Segment","Image","src","background","size","fluid","component_Forms","component_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.609d56da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.b6796c73.jpg\";","module.exports = __webpack_public_path__ + \"static/media/api_key.d578cfaf.bin\";","import React from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nconst Titles = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <nav>\r\n          <h1>Weather app</h1>\r\n        </nav>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Titles;\r\n","import React from 'react'\r\nimport { Form, Container, Input, Label, Button} from 'semantic-ui-react';\r\n\r\nconst Forms = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Container >\r\n      <Form onSubmit={props.getWeather} color='blue'>\r\n        <Form.Group inline>\r\n        <Form.Field>\r\n          <Label>City:</Label>\r\n          <Input type='text' placeholder='City' name='city' />\r\n        </Form.Field>\r\n        <Form.Field>\r\n        <Label>Country:</Label>\r\n          <Input type='text' placeholder='Country' name='country' />\r\n        </Form.Field>\r\n        </Form.Group>\r\n        <Button positive> Get Weather </Button>\r\n      </Form>\r\n      </Container>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Forms\r\n","import React from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <React.Fragment>\r\n      {/* <h4>Weather Information from Weather API</h4>\r\n        {props.city && <p>City: {props.city}</p>}\r\n        {props.country && <p>country: {props.country}</p>}\r\n        {props.description && <p>Description: {props.description}</p>}\r\n        {props.temperature && <p>Tempetrature: {props.temperature}</p>}\r\n        {props.humidity && <p>Humidity: {props.humidity}</p>}\r\n        {props.pressure && <p>Pressure: {props.pressure}</p>}\r\n        {props.error && <p>Error: {props.error}</p>} */}\r\n      <Grid color=\"red\">\r\n        <Grid.Column color=\"black\">\r\n          <h4>Weather Information from Weather API</h4>\r\n          {props.city && <p>City: {props.city}</p>}\r\n          {props.country && <p>country: {props.country}</p>}\r\n          {props.description && <p>Description: {props.description}</p>}\r\n          {props.temperature && <p>Tempetrature: {props.temperature}Â°C</p>}\r\n          {props.humidity && <p>Humidity: {props.humidity}%</p>}\r\n          {props.pressure && <p>Pressure: {props.pressure} hpa</p>}\r\n          {props.error && <p>Error: {props.error}</p>}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\r\nimport Titles from \"./component/Titles\";\r\nimport Forms from \"./component/Forms\";\r\nimport Weather from \"./component/Weather\";\r\nimport background from \"./img/bg.jpg\";\r\nimport \"./component/api_key\";\r\nimport { Container, Grid, Segment, Image, Responsive } from \"semantic-ui-react\";\r\n\r\nconst API_KEY = \"c3464f34fd5f12e3e4b73c001d9706a9\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    temperature: undefined,\r\n    humidity: undefined,\r\n    pressure: undefined,\r\n\r\n    city: undefined,\r\n    country: undefined,\r\n    description: undefined,\r\n    error: \"\"\r\n  };\r\n\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    if (!city && !country) {\r\n      this.setState({\r\n        error: \"Enter valid city and Country\"\r\n      });\r\n    } else {\r\n      const call_api = await fetch(\r\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\r\n      );\r\n      const data = await call_api.json();\r\n      console.log(data);\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        pressure: data.main.pressure,\r\n        humidity: data.main.humidity,\r\n\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        description: data.weather[0].description,\r\n        error: \"\"\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Container>\r\n          <Titles />\r\n          <Grid columns={2}>\r\n            <Grid.Row stretched>\r\n              <Grid.Column width={4}>\r\n                <Responsive>\r\n                  <Segment color=\"green\">\r\n                    <Image src={background} size=\"medium\" fluid />\r\n                  </Segment>\r\n                </Responsive>\r\n              </Grid.Column>\r\n\r\n              <Grid.Column width={12}>\r\n                <Segment color=\"green\">\r\n                  {/* <div className=\"form-container\"> */}\r\n                  <Forms getWeather={this.getWeather} />\r\n                  {/* </div> */}\r\n                </Segment>\r\n                <Responsive>\r\n                  <Segment color=\"green\">\r\n                    <Weather\r\n                      temperature={this.state.temperature}\r\n                      pressure={this.state.pressure}\r\n                      humidity={this.state.humidity}\r\n                      city={this.state.city}\r\n                      country={this.state.country}\r\n                      description={this.state.description}\r\n                      error={this.state.error}\r\n                    />\r\n                  </Segment>\r\n                </Responsive>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}